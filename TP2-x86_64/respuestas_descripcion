MATIAS LEIN 

mlein@udesa.edu.ar



phase_1:

Lo que hice fue leer el contenido de memoria en la dirección 0x4c9a58 
(donde el programa almacena el string correcto) usando el comando x/s 0x4c9a58 en gdb. 
Esto mostró la cadena de texto exacta que el binario espera como input en la fase 1. 
Luego, ingresé ese string al ejecutar el programa, y como coincidía perfectamente con el valor esperado, 
la comparación dio igual y se evitó que explotara la bomba.

parte mas relevante del codigo:
sub rsp, 0x8
lea rsi, [rip + 0xc7c62]: carga en rsi la dirección de un string constante que está hardcodeado (es el input correcto que espera la fase).
call 402304 <strings_not_equal>: llama a una función que compara el string que ingresaste con el string correcto (en rsi).
test eax, eax: verifica si eax es 0
jne 401e04: si eax ≠ 0 → strings distintos → salta a detonar la bomba.
call 40242d <explode_bomb>





phase_2:

Para encontrar el input correcto, se necesita cumplir dos condiciones que se evalúan en la función misterio: 
primero, que la cantidad de bits en 1 del valor primer número + segundo número - 32 (es decir, edi) sea exactamente 11; 
y segundo, que el resultado de primer número ^ segundo número sea negativo (es decir, que el bit más significativo sea 1).
El input 2147483649 1054 cumple ambas condiciones: la suma ajustada da 0x8000041F, que tiene exactamente 11 bits en 1, y el XOR entre ambos valores también da 0x8000041F, que es negativo. 
Por eso, este input desactiva correctamente la bomba.


parte mas relevante codigo:

401e9c: e8 6a ff ff ff        call   misterio            ; llama a misterio(edi, esi, edx)

entro a misterio :
401e0b: f3 0f 1e fa           endbr64
401e0f: 55                    push   rbp
401e10: 53                    push   rbx
401e11: 48 83 ec 08           sub    rsp,0x8
401e15: 89 f3                 mov    ebx,esi         ; ebx ← primer número
401e17: 89 d5                 mov    ebp,edx         ; ebp ← segundo número
401e19: b9 00 00 00 00        mov    ecx,0x0         ; ecx ← 0
401e1e: ba 00 00 00 00        mov    edx,0x0         ; edx ← 0 (contador de bits en 1)

entra a un loop 
    401e23: 89 f8                 mov    eax,edi         ; eax ← primer argumento (edi)
    401e25: d3 f8                 sar    eax,cl          ; desplazamiento a derecha (sign-extended) de eax en `cl` posiciones
    401e27: 83 e0 01              and    eax,0x1         ; eax ← eax & 1 (agarra el bit menos significativo)
    401e2a: 01 c2                 add    edx,eax         ; suma el bit al contador (edx)
    401e2c: 83 c1 01              add    ecx,0x1         ; ecx++
    401e2f: 83 f9 20              cmp    ecx,0x20        ; ¿ya hicimos 32?
    401e32: 75 ef                 jne    401e23          ; si no, repetir loop

401e34: 83 fa 0b              cmp    edx,0xb         ; edx == 11?
401e37: 75 10                 jne    401e49          ; si no, explota

401e39: 31 eb                 xor    ebx,ebp         ; ebx ^ ebp → primer número XOR segundo número
401e3b: 78 05                 js     401e42          ; si el resultado es negativo (sign bit=1), pasa
401e3d: e8 ...                call explode_bomb      ; si no, explota

phase_3:
Para desactivar esta fase, se necesita un input de al menos dos palabras, donde la primera sea una cadena y la segunda un número entero. 
La fase reserva memoria para la cadena, y luego con sscanf extrae ambos valores.
Después, llama a readlines con ese número, que devuelve un array de strings. 
Luego usa la función cuenta para contar cuántas veces aparece la palabra en ese array (hasta la posición n-1). 
El resultado de cuenta debe ser igual al número ingresado, y además no puede superar cierto rango (para evitar overflow). 
El input "aboquillar 685 abrete_sesamo" desactiva correctamente la bomba porque la palabra "aboquillar" aparece exactamente 685 veces en el array retornado por readlines, cumpliendo con todas las condiciones.


phase_4:
Para encontrar el input correcto para la fase 4, primero analicé el código ensamblador y entendí que la función esperaba dos enteros ingresados por el usuario, que serían almacenados en la pila mediante sscanf. 
Luego, el primer número se enmascara con & 0xF (limitándolo al rango de 0 a 15) y se utiliza como índice para acceder a un array de enteros.
A partir de ese índice inicial, el programa recorre el array siguiendo los valores como nuevos índices: en cada paso, toma el valor actual como el siguiente índice, suma ese valor a un acumulador y repite el proceso hasta llegar al valor 15.
Se requiere que este recorrido dure exactamente 7 pasos y que la suma total de los valores leídos coincida con el segundo número ingresado. 
Para resolverlo, primero localicé la dirección real del array a través del cálculo de rip + 0xcbcf0 y verifiqué el contenido del array en memoria usando GDB. 
Luego, inspeccioné manualmente los valores del array para encontrar un camino de 7 pasos que termine en 15. 
Encontré que comenzando con el índice 8 (es decir, ingresando como primer número cualquier valor que cumpla n & 0xF = 8), el recorrido seguía los valores: 0 → 7 → 9 → 12 → 2 → 6 → 15, cumpliendo exactamente con los 7 pasos requeridos. 
Finalmente, sumando los valores leídos (0 + 7 + 9 + 12 + 2 + 6 + 15) obtuve 51, que debía ser el segundo número del input. 
Así, el input correcto resultó ser 8 51, que cumple todas las condiciones del programa y desactiva la bomba.

parte mas relevante del codigo :

Prepara los punteros donde sscanf va a guardar los dos valores:
402138: lea    rcx,[rsp+0x4]       ; rcx = dirección de [rsp+4] -> segundo número
40213d: mov    rdx,rsp             ; rdx = dirección de [rsp]   -> primer número
402140: lea    rsi,[rip+0xc4fa5]   ; formato "%d %d"
402147: call   __isoc99_sscanf     ; intenta leer 2 enteros del input del usuario

Verifica que sscanf haya leído 2 valores:
40214c: cmp    eax,0x1
40214f: jle    explode_bomb        ; si leyó ≤1, explota

Procesa el primer número:
402151: mov    eax,[rsp]           ; carga el primer número
402154: and    eax,0xf             ; lo restringe a un valor entre 0 y 15
402157: mov    [rsp],eax           ; lo guarda de nuevo

Verificación especial:
40215a: cmp    eax,0xf             
40215d: je     fase_ok             ; si es 15, salta y no explota

Inicializa variables para el recorrido:
40215f: mov    ecx,0               ; suma acumulada = 0
402164: mov    edx,0               ; contador de pasos = 0
402169: lea    rsi,[rip+0xcbcf0]   ; puntero base al array en memoria

Bucle que recorre el array:
402170: add    edx,1               ; pasos++
402173: cdqe                      ; extiende eax a 64 bits
402175: mov    eax,[rsi+rax*4]    ; siguiente índice = array[índice actual]
402178: add    ecx,eax            ; suma += valor leído
40217a: cmp    eax,0xf             ; ¿llegamos al nodo final (15)?
40217d: jne    402170              ; si no, repetir

Verifica que fueron exactamente 7 pasos:
402186: cmp    edx,0x7
402189: jne    explode_bomb        ; si no fueron 7 pasos, explota

Verifica que la suma sea igual al segundo número:
40218b: cmp    [rsp+0x4],ecx
40218f: jne    explode_bomb        ; si la suma no coincide, explota

Si todas las condiciones se cumplen, pasa.



secret_phase:

Para activar y desactivar la secret_phase de la bomba, descubrí que no se accede automáticamente al completar las cuatro fases normales, sino que se activa si se ingresa un input especial cuando se está completando la phase_3.
Al analizar el código de phase_defused, encontré que, si al momento de desactivar una fase se detecta que ya se completaron cuatro inputs (num_input_strings == 4), el programa intenta parsear una línea extra con formato "%s %d %s", y si el tercer string coincide con "abrete_sesamo",
entonces llama directamente a secret_phase. 
Por eso, durante la phase_3, ingresé el input aaboquillar 685 abrete_sesamo, lo que activó dicha fase secreta. 
Luego, el programa pedía un número y ejecutaba fun7, una función recursiva que recorría un árbol binario desde un nodo raíz (n1). 
Analicé el código de fun7 y vi que debía devolver 7, lo que significa recorrer el árbol tres veces hacia la derecha (ya que derecha equivale a *2 + 1, y 7 = 111 en binario). Entonces, para que fun7(n1, input) == 7, el número input tiene que estar en el nodo al que se llega yendo 3 veces a la derecha desde la raíz del árbol.
Seguí el puntero derecho (+16) desde la raíz (0x4f91f0) tres veces, y encontré que el nodo destino contenía el valor 0x3e9, que es 1001 en decimal. Finalmente, al ingresar 1001, la secret_phase se desactivó.
